/*
Обязательные условия выполнения: данные со стандартного ввода читаются функцией readTask(),
которая возвращает 3 значения типа пустой интерфейс. Эта функция использует пакеты encoding/json, fmt,
и os - не удаляйте их из импорта. Скорее всего, вам понадобится пакет "fmt", но вы можете использовать
любой другой пакет для записи в стандартный вывод не удаляя fmt.
Итак, вы получаете 3 значения типа пустой интерфейс: если все удачно, то первые 2 значения будут float64.
Третье значение в идеальном случае будет строкой, которая может иметь значения:
"+", "-", "*", "/" (определенная математическая операция). Но такие идеальные случаи будут не всегда,
вы можете получить значения других типов, а также строка в третьем значении может не относится к одной из
указанных математических операций.
Результат выполнения программы должен быть такой:
в штатной ситуации вы должны напечатать в стандартный вывод результат выполнения математической операции
с точностью до 4 цифры после запятой (fmt.Printf(%.4f)); если первое или второе значение не является типом float64,
вы должны напечатать сообщение об ошибке вида: value=полученное_значение: тип_значения (например: value=true: bool)
если третье значение имеет неверный тип или передан знак, не относящийся к указанным выше математическим операциям,
сообщение об ошибке должно иметь вид: неизвестная операция
Гарантируется, что ошибка в аргументах может быть только одна, поэтому если вы при проверке первого значения
увидели, что оно содержит ошибку - печатайте сообщение об ошибке и завершайте работу программы, проверка остальных
аргументов значения уже не имеет, а проверяющая система воспримет 2 сообщения об ошибке как нарушение условия
выполнения задания.
*/
package main

import (
	"fmt"
)

// функция проверяет первые два параметра на нужный тип
func readTask() (interface{}, interface{}, interface{}) {

	return true, 4.7, "-"

}

func action(a, b float64, symbol string) (res float64) {

	if symbol == "+" {
		res = a + b
	} else if symbol == "*" {
		res = a * b
	} else if symbol == "/" {
		res = a / b
	} else if symbol == "-" {
		if b == 0.0 {
			panic("divide by zero")
		} else {
			res = a - b
		}
	}

	return res

}

func contains(elems []string, v string) bool {
	for _, s := range elems {
		if v == s {
			return true
		}
	}
	return false
}
func main() {
	value1, value2, operation := readTask() // исходные данные получаются с помощью этой функции
	// все полученные значения имеют тип пустого интерфейса
	v1, ok1 := value1.(float64)
	v2, ok2 := value2.(float64)
	optn, ok3 := operation.(string)
	if contains([]string{"*", "/", "+", "-"}, optn) {
		if ok1 && ok2 && ok3 {
			fmt.Printf("%.4f", action(v1, v2, optn))
		} else if !ok1 {
			fmt.Printf("value=%v: %T", value1, value1)
		} else if !ok2 {
			fmt.Printf("value=%v: %T", value2, value2)
		}
	} else {
		fmt.Println("неизвестная операция")
	}

}
